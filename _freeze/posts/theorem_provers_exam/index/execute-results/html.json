{
  "hash": "b3f990c59d1c58d62972624ee9d0fa13",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Automated theorem proving\"\nauthor: \"Luca Leon Happel\"\ndate: \"2024-02-21\"\ndate-modified: \"2024-02-21\"\ncategories: [\"mathematics\", \"logic\", \"automated theorem proving\", \"lean4\", \"formal verification\"]\nbibliography: references.bib\nformat:\n    html:\n        code-fold: true\n        code-summary: \"Show the code\"\nimage: \"thumbnail.svg\"\nfilters: \n  - ./lean4.py\n---\n\n::: {.hidden}\n$$\n\\newcommand{\\a}{\\text{a}}\n\\newcommand{\\b}{\\text{b}}\n\\newcommand{\\f}{\\text{f}}\n\\newcommand{\\g}{\\text{g}}\n\\newcommand{\\T}{\\mathbb{T}}\n$$\n:::\n\n## Introduction\n\nIf you are a programmer, most likely you know that feeling you get when you work on your code for too long, that maybe, however unlikely, there is a bug in your code. You have tested it, you have written unit tests, but still, you are not sure. You are not sure if your code is correct. This is where formal verification comes in. Formal verification is the process of proving that a program is correct. This can be done in many ways, but one of the most interesting ways is automated theorem proving. In this article, I will provide a glimpse into automated theorem proving and show you how to use the Lean4 programming language to prove theorems. This is not really intended as an introduction to Lean4 or automated theorem proving, but rather as a demonstration of what I learned after half holding a seminar about it, attending half a year of a course about it at the [university of Düsseldorf](https://www.hhu.de/) and particiating at the conference [Lean for the Curious Mathematician 2023](https://lftcm2023.github.io/).\n\n## From functional programming to automated theorem proving\n\nLean4 is a functional programming language. This means that it is a programming language that is based on the $\\lambda$-calculus. The $\\lambda$-calculus is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. In Lean4, we write programs by defining functions, composing them in clever ways and finally applying them to specific arguemnts. In this regard, Lean4 is very similar to [Haskell](https://www.haskell.org/), about which [I held a talk a year ago](posts/bachelor-seminar-haskell/).\n\nBy enriching the $\\lambda$-calculus with a sufficiently strong type system like in Lean4, we can use the resulting programming language to write programs that are provably correct. The foundation of this is the [Curry-Howard correspondence](https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence), whose motto is \"propositions as types, proofs as terms\". In $\\lambda$-calculus, terms are well-defined mathematical objects as are types.\n\nA quick example here would be:\n\n```{lean4}\ndef swap {α β : Type} (p : α × β) : β × α := (p.snd, p.fst)\n\n\ntheorem swap_swap {α β : Type} (p : α × β) : swap (swap p) = p :=\n  match p with\n  | (a, b) => rfl\n```\n\nHere we we define a function `{lean4} swap` that swaps the elements of a pair. We then prove that `{lean4} swap` is involutive, i.e. that `{lean4} swap (swap p) = p` for all pairs `p`. The `{lean4} theorem` keyword is used to define a theorem, but is just syntactic sugar for defining a function that represents a proof. Notice that we state our theorem using Lean4's type system and then provide a proof using Lean4's programming language. The proof is verified by the Lean4 compiler, which checks if each step in the program has valid types. If we were to change the proof to the following:\n\n```{lean4}\ntheorem swap_swap {α β : Type} (p : α × β) : swap (swap p) ≠ p :=\n  match p with\n  | (a, b) => rfl\n```\n\nThe Lean4 compiler would throw the following error regarding the `{lean4} rlf` function:\n\n```{lean4}\ntype mismatch\n  rfl\nhas type\n  ?m.149 = ?m.149 : Prop\nbut is expected to have type\n  swap (swap (a, b)) ≠ (a, b) : Prop\n```\n\n### Untyped $\\lambda$-calculus\n\nLet $V = \\{x,y,z, \\dots\\}$ be a set, which we call the set of variables and let $K = \\{\\a,\\b,\\f,\\g, \\dots\\}$ be a set, which we call the set of constants. We can now define the set of terms $\\Lambda$ _inductively_ as follows:\n\n| Rule                                                               | Name        |\n| ------------------------------------------------------------------ | ----------- |\n| If $x \\in V$, then $x \\in \\Lambda$                                 | Variable    |\n| If $\\f \\in K$, then $\\f \\in \\Lambda$                               | Constant    |\n| If $s,t \\in \\Lambda$, then $(st) \\in \\Lambda$                      | Application |\n| If $x \\in V$ and $t \\in \\Lambda$, then $(\\lambda x.t) \\in \\Lambda$ | Abstraction |\n\nUsing the notation of the [Backus–Naur form](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form), we can define $\\Lambda$ succinctly as follows:\n\n$$\n\\Lambda ::= V \\mid K \\mid \\Lambda \\Lambda \\mid \\lambda V.\\Lambda\n$$\n\nThis strongly resembles the [syntax of Lean4](https://leanprover.github.io/functional_programming_in_lean/getting-to-know/datatypes-and-patterns.html) and also [that of Haskell](https://wiki.haskell.org/Type).\n\n### Simply typed $\\lambda$-calculus\n\nIn the simply typed $\\lambda$-calculus, we enrich the untyped $\\lambda$-calculus with a type system. We define the set of types $\\T$ _inductively_ using a set of _base types_ $\\T_0$ as follows:\n\n1. If $A \\in \\T_0$, then $A \\in \\T$\n2. If $A,B \\in \\T$, then $A \\to B \\in \\T$\n\nUsing the notation of the [Backus–Naur form](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form) again, we can define $\\T$ succinctly as follows:\n\n$$\n\\T ::= \\T_0 \\mid \\T \\to \\T\n$$\n\nUsing the set of types $\\T$, we can now define the set of typed terms $\\Lambda_\\T$ _inductively_ using the Backus–Naur form as follows:\n\n$$\n\\begin{align*}\n\\Lambda_\\T &::= V \\mid K \\mid \\Lambda_\\T \\Lambda_\\T \\mid \\lambda V:\\T.\\Lambda_\\T \\\\\n           & \\text{where } \\\\\n           & V \\text{ is the infinite set of variables } \\\\\n           & K \\text{ is the set of constants } \\\\\n\\end{align*}\n$$\n\n### Type inference\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}